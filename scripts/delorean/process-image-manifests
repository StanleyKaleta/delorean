#!/usr/bin/env bash

# This script extracts the most recent manifests from an image containing a manifests bundle and processes it into a version that works with this operator.
#
# Example: Running the script and checking the changes produced using git status
#
#$ ./process-image-manifests registry-proxy.engineering.redhat.com/rh-osbs/3scale-amp2-3scale-rhel7-operator-metadata:1.11.0-2
#$ git status
# Changes not staged for commit:
#  (use "git add <file>..." to update what will be committed)
#  (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   manifests/integreatly-3scale/3scale.package.yaml
#
#Untracked files:
#  (use "git add <file>..." to include in what will be committed)
#
#	manifests/integreatly-3scale/3scale-0.5.0/


set -e

WORK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MANIFEST_TMP_DIR=${MANIFESTS_DIR}/tmp
IMAGE=$1
PRODUCT=$2

function ver { printf "%03d%03d%03d%03d" $(echo "$1" | tr '.' ' '); }

catch() {
    if [ "$1" == "127" ]; then
        echo "This script depends on the package yq"
        echo "For installation instructions visit: https://mikefarah.gitbook.io/yq/#install"
    fi
    echo "Cleaning up ${MANIFEST_TMP_DIR}"
    rm -rf ${MANIFEST_TMP_DIR}
}

trap 'catch $?' EXIT

check_yq() {
    yq > /dev/null
}

extract_manifests_from_image() {
    echo "Creating ${MANIFEST_TMP_DIR} directory"
    mkdir -p ${MANIFEST_TMP_DIR}
    echo "Extracting manifests from image '${IMAGE}' to ${MANIFEST_TMP_DIR}"
    oc image extract $IMAGE --path /manifests/:${MANIFEST_TMP_DIR}
    ls -la ${MANIFEST_TMP_DIR}
}

get_current_csv_filename() {
    CURRENT_CSV_FILE_NAME=${PRODUCT}.package.yaml
}

get_current_csv() {
    echo "Getting current csv from existing package.yaml"
    # The operator versions do not all follow the same syntax
    # The passed value below will need to be fixed up for each product.
    CURRENT_CSV=$(yq r ${MANIFESTS_DIR}/integreatly-${PRODUCT}/${CURRENT_CSV_FILE_NAME} channels[0].currentCSV)
    case "$PRODUCT" in
    "fuse-online" | "3scale")
       CURRENT_CSV_SEMVER=$(echo ${CURRENT_CSV} | sed -e s/^${PRODUCT}-operator.v//)
       ;;
    "amq-online")
       CURRENT_CSV_SEMVER=$(echo ${CURRENT_CSV} | sed -e s/^${PRODUCT}.//)
       ;;
    "apicurito")
       CURRENT_CSV_SEMVER=$(echo ${CURRENT_CSV} | sed -e s/^${PRODUCT}operator.v//)
       ;;
     *)
       echo "Passed an unknown product $PRODUCT"
       exit
       ;;
    esac
    echo "Current CSV $CURRENT_CSV_SEMVER"
    CURRENT_SPEC_REPLACES=$(yq r ${MANIFESTS_DIR}/integreatly-${PRODUCT}/${CURRENT_CSV_SEMVER}/${CURRENT_CSV}.clusterserviceversion.yaml 'spec.replaces')
    echo "Current spec.replaces ${CURRENT_SPEC_REPLACES}"
}


get_new_csv() {
    IMAGE_MANIFEST_FILE=$(find ${MANIFEST_TMP_DIR} -name "*.package.yaml")
    # Get CSV case statement below as there are some differences in the amq-online package.yaml
    # Read more about it here: https://issues.redhat.com/browse/DEL-62?focusedCommentId=13985142&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-13985142
    case $PRODUCT in
    "fuse-online" | "3scale")
        DEFAUlT_CHANNEL=$(yq r ${IMAGE_MANIFEST_FILE} defaultChannel)
        NEW_CSV=$(yq r ${IMAGE_MANIFEST_FILE} channels.\(name==${DEFAUlT_CHANNEL}\).currentCSV)
        ;;
    "amq-online")
        NEW_CSV=$(yq r ${IMAGE_MANIFEST_FILE} channels.\(name==stable\).currentCSV)
        ;;
    "apicurito")
        NEW_CSV=$(yq r ${IMAGE_MANIFEST_FILE} channels.\(name==alpha\).currentCSV)
        ;;
    *)
      echo "Passed an unknown product $PRODUCT"
      exit
    esac
    # The sed entry here will need to be fixed up for each product.
    # The operator versions do not all follow the same syntax
    case $PRODUCT in
    "fuse-online")
      NEW_CSV_SEMVER=$(echo ${NEW_CSV} | sed s/^fuse-online-operator.v//)
      ;;
    "3scale")
      NEW_CSV_SEMVER=$(echo ${NEW_CSV} | sed s/^3scale-operator.v//)
      ;;
    "amq-online")
      NEW_CSV_SEMVER=$(echo $NEW_CSV | sed -e s/^amq-online.//)
      ;;
    "apicurito")
      NEW_CSV_SEMVER=$(echo ${NEW_CSV} | sed -e s/^apicuritooperator.v//)
      ;;
    *)
      echo "Passed an unknown product $PRODUCT"
      exit
    esac
    echo "New CSV $NEW_CSV_SEMVER"
 
}

check_versions() {
    if [ $(ver $NEW_CSV_SEMVER) -lt $(ver $CURRENT_CSV_SEMVER) ]
    then
        echo "There is a newer version of the CSV present so EXIT"
        exit
    fi
    echo "Newer version found, continuing"
}

get_spec_replaces(){
    if [ $(ver $NEW_CSV_SEMVER) -eq $(ver $CURRENT_CSV_SEMVER) ]
    then
        # In cases where the csv is the same but the files require an update
        # the spec.replaces will remain the same as what's listed in the previous csv
        # NOT the new replaces present in the extracted manifest"
        # As the whole file is replaced by what's extracted we still need to carry out the patch
        # But with the CURRENT_SPEC_REPLACES sourced before any files are overwritten.
        SPEC_REPLACES=${CURRENT_SPEC_REPLACES}
    else
        SPEC_REPLACES=${CURRENT_CSV}
    fi
}

copy_new_csv() {
    echo "Copying process manifests to ${MANIFESTS_DIR}"
    # The below line won't work for apicurito as it doesn't add the product name to the semver in it's folder structure
    NEW_CSV_FOLDER=$NEW_CSV_SEMVER
    # mv ${MANIFEST_TMP_DIR}/${NEW_CSV_SEMVER} ${MANIFEST_TMP_DIR}/${NEW_CSV_FOLDER}
    # Delete the target directory if it already exists
    rm -rf ${MANIFESTS_DIR}/integreatly-${PRODUCT}/${NEW_CSV_FOLDER}
    mv ${MANIFEST_TMP_DIR}/${NEW_CSV_FOLDER} ${MANIFESTS_DIR}/integreatly-${PRODUCT}/
}

get_file_name_for_new_csv() {
  # In the case of 3scale the package name needs to be customised
  case $PRODUCT in
  "3scale" | "fuse-online")
    NEW_CSV_FILE_NAME=${PRODUCT}-operator.v$NEW_CSV_SEMVER.clusterserviceversion.yaml
    ;;
  "amq-online")
    NEW_CSV_FILE_NAME=${PRODUCT}.$NEW_CSV_SEMVER.clusterserviceversion.yaml
    ;;
  "apicurito")
    NEW_CSV_FILE_NAME=${PRODUCT}operator.v$NEW_CSV_SEMVER.clusterserviceversion.yaml
    ;;
  esac
}


update_new_csv() {
    echo "updating csv"
    case $PRODUCT in
    "fuse-online" | "3scale")
        DEFAUlT_CHANNEL=$(yq r ${IMAGE_MANIFEST_FILE} defaultChannel)
        NEW_CSV=$(yq r ${IMAGE_MANIFEST_FILE} channels.\(name==${DEFAUlT_CHANNEL}\).currentCSV)
        ;;
    "amq-online")
        NEW_CSV=$(yq r ${IMAGE_MANIFEST_FILE} channels.\(name==stable\).currentCSV)
        ;;
    "apicurito")
        NEW_CSV=$(yq r ${IMAGE_MANIFEST_FILE} channels.\(name==alpha\).currentCSV)
        ;;
    *)
      echo "Passed an unknown product $PRODUCT"
      exit
    esac
    echo "${MANIFESTS_DIR}/integreatly-${PRODUCT}/${NEW_CSV_FOLDER}/${NEW_CSV_FILE_NAME}"
    [ -z "${SPEC_REPLACES}" ] || yq w -i ${MANIFESTS_DIR}/integreatly-${PRODUCT}/${NEW_CSV_FOLDER}/${NEW_CSV_FILE_NAME} 'spec.replaces' ${SPEC_REPLACES}
    yq w -i ${MANIFESTS_DIR}/integreatly-${PRODUCT}/${NEW_CSV_FOLDER}/${NEW_CSV_FILE_NAME} 'spec.install.spec.deployments[0].spec.template.spec.containers[0].env.name==WATCH_NAMESPACE.valueFrom.fieldRef.fieldPath' metadata.annotations[\'olm.targetNamespaces\']
    yq w -i ${MANIFESTS_DIR}/integreatly-${PRODUCT}/${NEW_CSV_FOLDER}/${NEW_CSV_FILE_NAME} 'spec.install.spec.deployments[0].spec.template.spec.containers[0].env.name==NAMESPACE.valueFrom.fieldRef.fieldPath' metadata.annotations[\'olm.targetNamespaces\']
}


update_package_yaml() {
    yq w -i ${MANIFESTS_DIR}/integreatly-${PRODUCT}/${PRODUCT}.package.yaml channels.\(name==rhmi\).currentCSV $NEW_CSV
}

process_image() {
   check_yq
   echo "~~~~~~"
   echo "Process Image '$IMAGE'"
   echo "~~~~~~"
   extract_manifests_from_image
   get_current_csv_filename
   get_current_csv
   get_new_csv
   check_versions
   get_spec_replaces
   copy_new_csv
   get_file_name_for_new_csv
   update_new_csv
   update_package_yaml
}

if [ -z "${MANIFESTS_DIR}" ]; then
    echo "MANIFEST_DIR is not set!!"
    exit 1
else
    process_image
fi
